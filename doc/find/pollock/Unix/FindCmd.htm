<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
            "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en"> <head>
<meta http-equiv="Content-Type"
      content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">
<meta http-equiv="Last-Modified" content="Sun, 21 Oct 2012 23:38:00">
<meta name="description"
      content="Unix, Linux, find, find command, tutorial">
<meta name="author" content="Wayne Pollock">
<meta name="keywords" content="Unix, Linux, find, tutorial">
<meta name="language" content="english">
<meta name="rating" content="all viewers"> 
<link rel="contents" href="http://content.hccfl.edu/pollock/CTS1106.htm">
<link rel="previous" href="http://content.hccfl.edu/pollock/CTS1106.htm">
<link rel="icon" type="image/x-icon" href="http://content.hccfl.edu/pollock/images/penguin.ico">
<link rel="stylesheet" href="../Styles.css" type="text/css">
<script type="text/JavaScript" src="../Common.js"> </script>

<title> Unix/Linux "find" Command Tutorial </title>

</head>
<body>
<div class="Center">

<h1> A Unix/Linux &ldquo;find&rdquo; Command Tutorial </h1>
<h2 class="hide">&nbsp;</h2>
<h3>&copy;2002&ndash;2012 by Wayne Pollock, Tampa Florida USA.&nbsp;
All rights reserved.</h3>
</div>

<div><h2><a id="locating"></a> Locating Files: </h2></div>

<div class="Indent">
<p>
The <code>find</code> command is used to locate files on a Unix
or Linux system.&nbsp;
<code>find</code> will search any set of directories you specify
for files that match the supplied <em>search criteria</em>.&nbsp;
You can search for files by name, owner, group, type, permissions,
date, and other criteria.&nbsp;
The search is recursive in that it will search all subdirectories
too.&nbsp;
The syntax looks like this:
</p>

<pre class="Indent">
find <em>where-to-look criteria what-to-do</em></pre>

<p>
All arguments to <code>find</code> are optional, and there are
defaults for all parts.&nbsp;
(This may depend on which version of <code>find</code> is used.&nbsp;
Here we discuss the freely available Gnu version of <code>find</code>,
which is the version available on <code>YborStudent</code>.)&nbsp;
For example, <code><em>where-to-look</em></code>
defaults to <code>.</code> (that is, the current working directory),
<code><em>criteria</em></code> defaults to none (that is, select all
files), and <code><em>what-to-do</em></code>
(known as the <code>find</code> <em>action</em>)
defaults to <code>&#8209;print</code> (that is, display the names of
found files to standard output).&nbsp;
Technically, the criteria and actions are all known as <code>find</code>
<em>primaries</em>.
</p>

<p>
For example:
</p>

<pre class="Indent">
find</pre>

<p>
will display the pathnames of all files in the current directory
and all subdirectories.&nbsp;
The commands
</p>

<pre class="Indent">
find . -print
find -print
find .</pre>

<p>
do the exact same thing.&nbsp;
Here's an example <code>find</code> command using a search criterion
and the default action:
</p>

<pre class="Indent">
find / -name foo</pre>
<p>
This will search the whole system for any files named <code>foo</code>
and display their pathnames.&nbsp;
Here we are using the criterion <code>-name</code> with the argument
<code>foo</code> to tell <code>find</code> to perform a name search
for the filename <code>foo</code>.&nbsp;
The output might look like this:
</p>

<pre class="Indent">
/home/wpollock/foo
/home/ua02/foo
/tmp/foo</pre>

<p>
If <code>find</code> doesn't locate any matching files, it produces
no output.
</p>

<p>
The above example said to search the whole system, by
specifying the root directory (&ldquo;<code>/</code>&rdquo;)
to search.&nbsp;
If you don't run this command as root, <code>find</code> will
display a error message for each directory on which you don't
have read permission.&nbsp;
This can be a lot of messages, and the matching files that are
found may scroll right off your screen.&nbsp;
A good way to deal with this problem is to redirect the error
messages so you don't have to see them at all:
</p>

<pre class="Indent">
find / -name foo <strong>2&gt;/dev/null</strong></pre>

<p>
You can specify as many places to search as you wish:
</p>

<pre class="Indent">
find /tmp /var/tmp . $HOME -name foo</pre>
</div>

<div><h2><a id="advanced"></a>
 Advanced Features and Applications: </h2></div>

<div class="Indent">
<p>
The &ldquo;<code>&#8209;print</code>&rdquo; action lists the names of files
separated by a newline.&nbsp;
But it is common to <em>pipe</em> the output of <code>find</code>
into <code>xargs</code>, which uses a space to separate file names.&nbsp;
This can lead to problems if any found files contain spaces in
their names, as the output doesn't use any quoting.&nbsp;
In such cases, when the output of <code>find</code> contains a file
name such as &ldquo;<code>foo&nbsp;bar</code>&rdquo; and is piped into
another command, that command &ldquo;sees&rdquo; two file names, not one
file name containing a space.&nbsp;
Even without using <code>xargs</code>, you could have a problem if
the file name contains a newline character, as most utilities expect one
file name per line.
</p>

<p>
In such cases, you can specify the action
&ldquo;<code>&#8209;print0</code>&rdquo; instead.&nbsp;
This lists the found files separated not with a newline
but with a <em>null</em> (or &ldquo;<abbr>NUL</abbr>&rdquo;) character,
which is not a legal character in Unix or Linux file names.&nbsp;
Of course the command that reads the output of <code>find</code>
must be able to handle such a list of file names.&nbsp;  Many
commands commonly used with <code>find</code> (such as
<code>tar</code> or <code>cpio</code>) have special options to
read in file names separated with NULs instead of spaces.
</p>

<p>
Instead of having <code>find</code> list the files, it can run some
command for each file found, using the &ldquo;<code>&#8209;exec</code>&rdquo;
action.&nbsp;
The <code>&#8209;exec</code> is followed by some shell command line,
ended with a semicolon (&ldquo;<code>;</code>&rdquo;).&nbsp;
(The semicolon must be quoted from the shell, so <code>find</code>
can see it!)&nbsp;
Within that command line, the word &ldquo;<code>{}</code>&rdquo; will expand
out to the name of the found file.&nbsp;
See below for some examples.
</p>

<p>
You can use shell-style wildcards in the <code>-name</code> search
argument:
</p>

<pre class="Indent">
find . -name foo\*bar</pre>

<p>
This will search from the current directory down for <code>foo*bar</code>
(that is, any filename that begins with <code>foo</code> and
ends with <code>bar</code>).&nbsp;
Note that wildcards in the name argument
must be quoted so the shell doesn't expand them before passing them
to <code>find</code>.&nbsp;
Also, unlike regular shell wildcards, these will match leading
periods in filenames.&nbsp;
(For example &ldquo;<code>find&nbsp;-name&nbsp;\*.txt</code>&rdquo; would
match &ldquo;<code>.foo.txt</code>&rdquo;.)
</p>

<p>
You can search for other criteria beside the name.&nbsp;
Also you can list multiple search criteria.&nbsp;
When you have multiple criteria, any found files must match all
listed criteria.&nbsp;
That is, there is an implied Boolean <em>AND</em> operator
between the listed search criteria.&nbsp;
<code>find</code> also allows <em>OR</em> and <em>NOT</em> Boolean
operators, as well as grouping, to combine search criteria in
powerful ways (not shown here.)
</p>

<p>
Here's an example using two search criteria:
</p>

<pre class="Indent">
find / <strong>-type f -mtime -7</strong> | xargs tar -rf weekly_incremental.tar
gzip weekly_incremental.tar</pre>

<p>
will find any regular files (i.e., not directories or other special files)
with the criteria &ldquo;<code>&#8209;type&nbsp;f</code>&rdquo;, and only those
modified seven or fewer days ago
(&ldquo;<code>&#8209;mtime&nbsp;&#8209;7</code>&rdquo;).&nbsp;
Note the use of <code>xargs</code>, a handy utility that coverts a
stream of input (in this case the output of <code>find</code>) into
command line arguments for the supplied command (in this case
<code>tar</code>, used to create a backup archive).
</p>

<p class="boxed">
Using the <code>tar</code> option &ldquo;<code>&#8209;c</code>&rdquo;
is dangerous here;&nbsp;
<code>xargs</code> may invoke <code>tar</code> several times if
there are many files found, and each &ldquo;<code>&#8209;c</code>&rdquo; will
cause <code>tar</code> to over-write the previous invocation.&nbsp;
The &ldquo;<code>&#8209;r</code>&rdquo; option <em>appends</em> files to an
archive.&nbsp;
Other options such as those that would permit filenames containing
spaces would be useful in a &ldquo;production quality&rdquo; backup script.
</p>

<p>
<a id="xargs"></a>
Another use of <code>xargs</code> is illustrated below.&nbsp;
This command will efficiently remove all files named
<code>core</code> from your system (provided you run the command
as root of course):
</p>

<pre class="Indent">
find / -name core | xargs /bin/rm -f
find / -name core -exec /bin/rm -f '{}' \; # same thing
find / -name core -delete                  # same if using Gnu find
</pre>

<p>
The last two forms run the <code>rm</code> command once per file,
and are not as efficient as the first form, but they are safer
if file names contain spaces or newlines.&nbsp;
The first form can be made safer if rewritten to use
&ldquo;<code>&#8209;print0</code>&rdquo; instead of (the default)
&ldquo;<code>&#8209;print</code>&rdquo;.&nbsp;
&ldquo;<code>&#8209;exec</code>&rdquo; can be used more efficiently
(see <a href="FindCmd.htm#exec">Using <code>&#8209;exec</code> Efficiently</a> below),
but doing so means running the command once with many file names
passed as arguments, and so has the same safety issues as with
<code>xargs</code>.
</p>

<p>
One of my favorite of the <code>find</code> criteria is used
to locate files modified less than 10 minutes ago.&nbsp;
I use this right after using some system administration
tool, to learn which files got changed by that tool:
</p>

<pre class="Indent">
find / -mmin -10</pre>

<p>
(This search is also useful when I've downloaded some file but
can't locate it, only in that case &ldquo;<code>&#8209;cmin</code>&rdquo; may
work better.&nbsp;
Keep in mind neither of these criteria is standard; &ldquo;<code>&#8209;mtime</code>&rdquo;
and &ldquo;<code>&#8209;ctime</code>&rdquo; are standard, but use days and not minutes.)
</p>

<p>
Another common use is to locate all files owned by a given user
(&ldquo;<code>-user&nbsp;<em>username</em></code>&rdquo;).&nbsp;
This is useful when deleting user accounts.
</p>

<p>
You can also find files with various permissions set.&nbsp;
&ldquo;<code>-perm&nbsp;/<em>permissions</em></code>&rdquo; means to find
files with <strong>any</strong> of the specified <em>permissions</em>
on, &ldquo;<code>-perm&nbsp;-<em>permissions</em></code>&rdquo; means to
find files with <strong>all</strong> of the specified
<em>permissions</em> on, and
&ldquo;<code>-perm&nbsp;<em>permissions</em></code>&rdquo; means to
find files with <strong>exactly</strong> <em>permissions</em>.&nbsp;
<em>Permissions</em> can be specified either symbolically (preferred)
or with an octal number.&nbsp;
The following will locate files that are writeable by &ldquo;others&rdquo;
(including symlinks, which should be writeable by all):
</p>

<pre class="Indent">
find . -perm -o=w</pre>

<p>
(Using <code>-perm</code> is more complex than this example
shows.&nbsp;
You should check both the 
<a href="http://www.opengroup.org/onlinepubs/9699919799/utilities/find.html#tag_20_47_04">
POSIX documentation for <code>find</code></a>
(which explains how the symbolic modes work) and the
<a href="http://www.gnu.org/software/findutils/manual/html_mono/find.html#Overview">
Gnu <code>find</code> man page</a> (which describes the Gnu extensions).
</p>

<p>
When using <code>find</code> to locate files for backups, it often
pays to use the &ldquo;<code>-depth</code>&rdquo; option (really a criterion
that is always true), which forces the
output to be <em>depth-first</em>&mdash;that is, files first
and then the directories containing them.&nbsp;
This helps when the directories have restrictive permissions,
and restoring the directory first could prevent the files from
restoring at all (and would change the time stamp on the directory
in any case).&nbsp;
Normally, <code>find</code> returns the directory first, before any
of the files in that directory.&nbsp;
This is useful when using the &ldquo;<code>&#8209;prune</code>&rdquo; action to
prevent <code>find</code> from examining any files you want to
ignore:
</p>

<pre class="Indent">
find / -name /dev -prune ...<em>other criteria</em> | xargs tar ...
</pre>

<div class="boxed">
<p>
Using just &ldquo;<code>find / -name /dev &#8209;prune | xargs tar ...</code>&rdquo;
won't work as most people might expect.&nbsp;
This says to only find files named
&ldquo;<code>/dev</code>&rdquo;,
and then (if a directory) don't descend into it.&nbsp;
So you only get the single directory name &ldquo;<code>/dev</code>&rdquo;!&nbsp;
A better plan is to use the following:
</p>
<pre class="Indent">
find / ! -path /dev\* |xargs ...</pre>
<p>
which says find everything except pathnames that start with
&ldquo;<code>/dev</code>&rdquo;.&nbsp;
The &ldquo;<code>!</code>&rdquo; means Boolean <em>NOT</em>.
</p>
</div>

<p>
When specifying time with <code>find</code> options such as
<code>&#8209;mmin</code> (minutes) or <code>&#8209;mtime</code> (24 hour
periods, starting from now), you can specify a number
&ldquo;<code><em>n</em></code>&rdquo; to mean exactly
<code><em>n</em></code>, &ldquo;<code><em>-n</em></code>&rdquo;
to mean less than <code><em>n</em></code>, and
&ldquo;<code><em>+n</em></code>&rdquo; to mean more than
<code><em>n</em></code>.
</p>

<p class="boxed">
Fractional 24-hour periods are truncated!&nbsp;
That means that &ldquo;<code>find&nbsp;&#8209;mtime&nbsp;+1</code>&rdquo; says
to match files modified <strong>two or more days ago.</strong>
</p>

<p>
For example:
</p>
<pre class="Indent">
find . -mtime 0   # find files modified between now and 1 day ago
                  # (i.e., within the past 24 hours)
find . -mtime -1  # find files modified less than 1 day ago
                  # (i.e., within the past 24 hours, as before)
find . -mtime 1   # find files modified between 24 and 48 hours ago
find . -mtime +1  # find files modified more than 48 hours ago

find . -mmin +5 -mmin -10 # find files modified between
                          # 6 and 9 minutes ago
</pre>

<p>
Using the (non-standard) &ldquo;<code>&#8209;printf</code>&rdquo; action
instead of the default &ldquo;<code>&#8209;print</code>&rdquo; is useful
to control the output format better than you can with the <code>ls</code> or
<code>dir</code> utilities.&nbsp;
You can use <code>find</code> with the <code>&#8209;printf</code>
action to produce output that can easily be parsed by other utilities
or imported into spreadsheets or databases.&nbsp;
See the Gnu <code>find</code> man page for the dozens
of possibilities with the <code>&#8209;printf</code> action.&nbsp;
(In fact, <code>find</code> with <code>&#8209;printf</code> is more versatile
than <code>ls</code>; it is the preferred tool for forensic examiners
even on Windows systems, to list file information.)&nbsp;
For example the following displays non-hidden (no leading dot)
files in the current directory only (no subdirectories),
with an custom output format:
</p>

<pre class="Indent">
find . -maxdepth 1 -name '[!.]*' -printf 'Name: %16f Size: %6s\n'
</pre>

<div class="boxed">
<p>
&ldquo;<code>&#8209;maxdepth</code>&rdquo; is a Gnu extension.&nbsp;
On a modern, POSIX version of <code>find</code> you could use
this:
</p>

<pre class="Indent">find . -path './*' -prune ...</pre>

<p>
On any version of <code>find</code> you can use this more complex
(but portable) code:
</p>

<pre class="Indent">find . ! -name . -prune ...</pre>

<p>
which says to &ldquo;prune&rdquo; (don't descend into)
any directories except &ldquo;<code>.</code>&rdquo;.
</p>

<p>
Note that &ldquo;<code>&#8209;maxdepth&nbsp;1</code>&rdquo; will include
&ldquo;<code>.</code>&rdquo; unless you also specify
&ldquo;<code>&#8209;mindepth&nbsp;1</code>&rdquo;.&nbsp;
A portable way to include &ldquo;<code>.</code>&rdquo; is:
</p>

<pre class="Indent"> find . \( -name . -o -prune \) ...</pre>

<p>
The &ldquo;<code>\(</code>&rdquo; and &ldquo;<code>\)</code>&rdquo; are just
parenthesis used for grouping, and escaped from the shell.&nbsp;
The &ldquo;<code>-o</code>&rdquo; means Boolean <em>OR</em>.
</p>
<p>
[This information posted by Stephane Chazelas, on 3/10/09 in
newsgroup comp.unix.shell.]
</p>
</div>

<p>
As a system administrator, you can use <code>find</code> to locate
suspicious files (e.g., world writable files, files with no valid
owner and/or group, Set<abbr>UID</abbr> files, files with unusual permissions,
sizes, names, or dates).&nbsp;
Here's a final more complex example (which I saved as a shell
script):
</p>

<pre class="Indent">
find / -noleaf -wholename '/proc' -prune \
     -o -wholename '/sys' -prune \
     -o -wholename '/dev' -prune \
     -o -wholename '/windows-C-Drive' -prune \
     -o -perm -2 ! -type l  ! -type s \
     ! \( -type d -perm -1000 \) -print
</pre>

<p>
This says to seach the whole system, skipping the directories
<code>/proc</code>, <code>/sys</code>, <code>/dev</code>, and
<code>/windows-C-Drive</code> (presumably a Windows partition on
a dual-booted computer).&nbsp;
The Gnu <code>-noleaf</code> option tells <code>find</code> not
to assume all remaining mounted filesystems are Unix file systems
(you might have a mounted <acronym>CD</acronym> for instance).&nbsp;
The &ldquo;<code>-o</code>&rdquo; is the Boolean OR operator, and
&ldquo;<code>!</code>&rdquo; is the Boolean NOT operator (applies to the
following criteria).
</p>

<p>
So these criteria say to locate files that are world writable
(&ldquo;<code>-perm&nbsp;-2</code>&rdquo;, same as &ldquo;<code>-o=w</code>&rdquo;)
and NOT symlinks
(&ldquo;<code>!&nbsp;&#8209;type&nbsp;l</code>&rdquo;) and NOT <em>sockets</em>
(&ldquo;<code>!&nbsp;&#8209;type&nbsp;s</code>&rdquo;)
and NOT directories with the <em>sticky</em> (or <em>text</em>)
bit set
(&ldquo;<code>!&nbsp;\(&nbsp;&#8209;type&nbsp;d&nbsp;-perm&nbsp;-1000 \)<!--
--></code>&rdquo;).&nbsp;
(Symlinks, sockets, and directories with the sticky bit set, are often
world-writable and generally not suspicious.)
</p>

<p>
A common request is a way to find all the hard links to
some file.&nbsp;
Using &ldquo;<code>ls&nbsp;-li&nbsp;<em>file</em></code>&rdquo; will
tell you how many hard links the file has, and the
<em>inode number</em>.&nbsp;
You can locate all pathnames to this file with:
</p>

<pre>
  find <em>mount-point</em> -xdev -inum <em>inode-number</em>
</pre>

<p>
Since hard links are restricted to a single filesystem, you need
to search that whole filesystem so you start the search at the
filesystem's <em>mount point</em>.&nbsp;
(This is likely to be either &ldquo;<code>/home</code>&rdquo; or
&ldquo;<code>/</code>&rdquo; for files in your home directory.)&nbsp;
The &ldquo;<code>-xdev</code>&rdquo; options tells <code>find</code>
to not search any other filesystems.
</p>

<p>
(While most Unix and all Linux systems have a <code>find</code>
command that supports the &ldquo;<code>-inum</code>&rdquo; criterion,
this isn't POSIX standard.&nbsp;
Older Unix systems provided the &ldquo;<code>ncheck</code>&rdquo;
utility instead that could be used for this.)
</p>
</div>

<div><h2><a id="exec"></a>
 Using <code>&#8209;exec</code> Efficiently: </h2></div>

<div class="Indent">
<p>
The <code>&#8209;exec</code> action takes a command (along with
its options) as an argument.&nbsp;
The arguments should contain <code>{}</code> (usually quoted),
which is replaced in the command with the name of the currently
found file.&nbsp;
The command is terminated by a semicolon, which must be quoted
(&ldquo;escaped&rdquo;) so the shell will pass it literally to the
<code>find</code> command.
</p>

<p>
To use a more complex action with <code>&#8209;exec</code>, you can
use
&ldquo;<code><abbr
>sh&nbsp;&#8209;c&nbsp;<em>complex-command</em></abbr></code>&rdquo;
as the Unix command.&nbsp;
Here's a somewhat contrived example, that for each found file
replaces &ldquo;Mr.&rdquo; with &ldquo;Mr. or Ms.&rdquo;, and also converts
the file to uppercase:
</p>

<pre>
   find <em>whatever...</em> -exec sh -c 'sed "s/Mr\./Mr. or Ms./g" "{}" \
     | tr "[:lower:]" "[:upper:]" &gt;"{}.new"' \;</pre>

<p>
The <code>&#8209;exec</code> action in <code>find</code> is very useful,
but since it runs the command listed for every found file it isn't
very efficient.&nbsp;
On a large system this makes a difference!&nbsp;
One solution is to combine <code>find</code> with
<code>xargs</code> as discussed <a href="FindCmd.htm#xargs">above</a>:
</p>

<pre>
  find <em>whatever...</em> | xargs <em>command</em></pre>

<p>
However this approach has two limitations.&nbsp;
Firstly not all commands accept the
list of files at the end of the command.&nbsp;
A good example is <code>cp</code>:
</p>

<pre class="Indent">
find . -name \*.txt | xargs cp /tmp  # This won't work!
</pre>

<p>
(Note the Gnu version of <code>cp</code> has a non-POSIX
option &ldquo;<code>&#8209;t</code>&rdquo; for this, and <code>xargs</code>
has options to handle this too.)
</p>

<p>
Secondly, filenames may contain spaces or newlines, which would
confuse the command used with <code>xargs</code>.&nbsp;
(Again Gnu tools have options for that,
&ldquo;<code>find&nbsp;...&nbsp;&#8209;print0&nbsp;<!--
-->|&nbsp;xargs&nbsp;-0&nbsp;...</code>&rdquo;.)
</p>

<p>
There are POSIX (but non-obvious) solutions to both problems.&nbsp;
An alternate form of <code>&#8209;exec</code> ends with a plus-sign, not a
semi-colon.&nbsp;
This form collects the filenames into groups or sets, and runs the
command once per set.&nbsp;
(This is exactly what <code>xargs</code> does, to prevent argument
lists from becoming too long for the system to handle.)&nbsp;
In this form the <code>{}</code> argument expands to the set of
filenames.&nbsp;
For example:
</p>

<pre class="Indent">
find / -name core -exec /bin/rm -f '{}' +</pre>

<p>
This command is equivalent to using <code>find</code> with
<code>xargs</code>, only a bit shorter and more efficient.&nbsp;
But this form of <code>&#8209;exec</code> can be combined with a shell
feature to solve the other problem (names with spaces).&nbsp;
The POSIX shell allows us to use:
</p>

<pre class="Indent">
sh -c '<em>command-line</em>' [ <em>command-name</em> <!--
-->[ <em>args</em>... ] ]</pre>

<p>
<a id="fn3Src"></a>
(We don't usually care about the <em>command-name</em>, so &ldquo;X&rdquo;,
&ldquo;dummy&rdquo;, &ldquo;<abbr>sh</abbr>&rdquo;,
or &ldquo;'inline cmd'&rdquo; is often used.)&nbsp;
Here's an example of efficiently copying found files to
<code>/tmp</code>, in a POSIX-compliant way (Posted on 
<a href="http://groups.google.com/group/comp.unix.shell/">
comp.unix.shell</a> netnews newsgroup on Oct. 28 2007 by
Stephane CHAZELAS):
</p>

<pre class="Indent">
find . -name '*.txt' -type f \
  -exec sh -c 'exec cp -f "$@" /tmp' X '{}' +</pre>
<p>
(Obvious, simple, and readable, isn't it?&nbsp;
Perhaps not, but worth knowing since it is safe, portable, and efficient.)
</p>
</div>

<div><h2><a id="gotcha"></a> Common &ldquo;Gotcha&rdquo;: </h2></div>

<div class="Indent">
<p>
If the given expression to <code>find</code> does not contain any of the
&ldquo;action&rdquo; primaries <code>&#8209;exec</code>, <code>-ok</code>, or
<code>&#8209;print</code>, the given expression is effectively replaced by:
</p>

<pre class="Indent">
find \( <em>expression</em> \) -print</pre>

<p>
The implied parenthesis can cause unexpected results.&nbsp;
For example, consider these two similar commands:
</p>

<pre class="Indent" style="margin-bottom:.5em">
$ <strong>find -name tmp -prune -o -name \*.txt</strong>
./bin/data/secret.txt
./tmp
./missingEOL.txt
./public_html/graphics/README.txt
./datafile2.txt
./datafile.txt</pre>
<pre class="Indent" style="margin-top:0em">
$ <strong>find -name tmp -prune -o -name \*.txt -print</strong>
./bin/data/secret.txt
./missingEOL.txt
./public_html/graphics/README.txt
./datafile2.txt
./datafile.txt</pre>

<p>
The lack of an action in the first command means it is equivalent to:
</p>
<pre class="Indent">
find . \( -name tmp -prune -o -name \*.txt \) -print</pre>

<p>
This causes <code>tmp</code> to be included in the output.&nbsp;
However for the second <code>find</code> command the normal rules of
Boolean operator precedence apply, so the pruned directory does
not appear in the output.
</p>
</div>

<div>
<p>
The <code>find</code> command can be amazingly useful.&nbsp;
See the man page to learn all the criteria and actions you can use.
</p>
</div>

<div>
<script type="text/JavaScript">
// <![CDATA[
   addFooter( "Unix/Linux Question: find command" );
// ]]>
</script>
<noscript>
    <p> This page was last updated by Wayne Pollock. </p>
</noscript>
</div>
</body></html>
